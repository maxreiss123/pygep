# This workflow will test, build, and upload a Python Package to PyPI when a release is created.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries
# and https://packaging.python.org/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish pygep to PyPI

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.12"]  # Test across supported Python versions

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]  # Install package and dev extras (e.g., pytest)

      - name: Run tests
        run: pytest  # Adjust if your test command differs (e.g., pytest tests/)

  release-build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: test  # Only build if tests pass

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build release distributions
        run: |
          python -m pip install build
          python -m build  # Builds sdist and wheel

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs:
      - test
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      url: https://pypi.org/project/pygep
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/pygep/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  # OPTIONAL: Publish to TestPyPI for validation (uncomment if needed)
  # publish-to-testpypi:
  #   name: Publish to TestPyPI ðŸ§ª
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test
  #     - release-build
  #   permissions:
  #     id-token: write
  #   environment:
  #     name: testpypi
  #     url: https://test.pypi.org/project/pygep
  #   steps:
  #     - name: Retrieve release distributions
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: release-dists
  #         path: dist/
  #     - name: Publish release distributions to TestPyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         repository-url: https://test.pypi.org/legacy/
  #         packages-dir: dist/
